import { existsSync } from 'fs';
import { resolve, join, dirname } from 'path';

let l;async function w(e){return Function("x",'return import("file:///" + x)')(e)}async function h(e){l=l||await import('esbuild');let o=resolve(e.cwd||".");if(e.config){let a,f,r=o,b=process.cwd();for(;a=join(r,e.config),!(f=existsSync(a));){if(r===b)break;r=dirname(r);}f&&await w(a).then(i=>{i=i.default||i,Object.assign(e,i.config||i);});}let{platform:u,sourcemap:d,external:m=[]}=e,s=["worker","browser","module","jsnext","main"],n=["worker","browser","import","production","default"],t={bundle:!0,splitting:!1,absWorkingDir:o,outfile:e.output,entryPoints:[e.input],format:e.format||"esm",target:e.target||"esnext",sourcemap:d?"inline":!1,resolveExtensions:[".tsx",".ts",".jsx",".mjs",".js",".json",".htm",".html"],external:[].concat(m),logLevel:e.loglevel||"info",minify:!!e.minify,mainFields:s,conditions:n,charset:"utf8",loader:{".htm":"text",".html":"text"}};u==="node"&&(s=s.slice(2),n=["node","require",...n.slice(2)]),e.modify?e.modify(t):e.overrides&&Object.assign(t,e.overrides),t.write=!0,e.analyze&&(t.metafile=!0);let c=await l.build(t);e.analyze&&console.log(await l.analyzeMetafile(c.metafile,{verbose:/^(debug|verb)$/i.test(t.logLevel),color:!0}));}function j(e){return e}

export { h as build, j as define };
